{"version":3,"sources":["utils/selectHelpers.ts","components/filter/DateSelect.tsx","utils/apiHelper.ts","utils/useFetch.hook.tsx","components/filter/FilterSelect.tsx","components/filter/FilterContainer.tsx","components/graph/ResultGraph.tsx","components/hoc/Spinner.tsx","components/graph/GraphContainer.tsx","pages/Home.tsx","App.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","formControl","margin","spacing","minWidth","selectEmpty","marginTop","getDates","startDate","stopDate","dateArray","start","moment","stop","push","format","add","DateSelect","inputs","setInputs","classes","useState","state","setState","FormControl","required","className","InputLabel","htmlFor","Select","native","value","date","onChange","event","name","target","String","inputProps","id","label","map","val","FormHelperText","endpoints","useFetch","url","setData","error","setError","loading","setLoading","useEffect","a","fetch","res","json","resJson","FilterSelect","type","title","list","setList","getURL","results","Device_ID","Serial_Number","FilterContainer","data","Button","variant","color","onClick","e","preventDefault","ResultGraphs","dataPoints","x","y","forEach","values","Object","console","log","labels","datasets","fill","backgroundColor","borderColor","pointBackgroundColor","options","responsive","scales","ticks","display","beginAtZero","text","maintainAspectRatio","elements","point","radius","root","marginLeft","Spinner","CircularProgress","GraphContainer","readings","setReadings","setDataPoints","DateTime","Wattage","dataHandler","endpoint","ResultGraph","Home","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fa6e1604.chunk.js","sourcesContent":["import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport moment from 'moment';\n\n// Filter columns\nexport type Filters = 'Device_ID' | 'Serial_Number';\n\n/**\n * MaterialUI select styling\n */\nexport const useStyles = makeStyles((theme: Theme) => createStyles({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\n/**\n * Get list of valid dates based on datebase\n * @param startDate string min date\n * @param stopDate string max date\n * @returns a list of valid dates\n */\nexport const getDates = (startDate: string, stopDate: string): string[] => {\n  const dateArray: string[] = [];\n  let start = moment(startDate);\n  const stop = moment(stopDate);\n  while (start <= stop) {\n    dateArray.push(moment(start).format('YYYY-MM-DD'));\n    start = moment(start).add(1, 'days');\n  }\n  return dateArray;\n};\n","import React, { ReactElement, useState } from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport moment from 'moment';\nimport { getDates, useStyles } from '../../utils/selectHelpers';\nimport { InputType } from '../../utils/apiHelper';\n\ninterface Props {\n  inputs: InputType;\n  setInputs: React.Dispatch<React.SetStateAction<InputType>>;\n}\n\n/**\n * Creates date dropdown component\n * @param inputs InputType\n * @param setInputs React.Dispatch<React.SetStateAction<InputType>>\n * @returns React component\n */\nconst DateSelect: React.FC<Props> = ({ inputs, setInputs }): ReactElement => {\n  const classes = useStyles();\n  const [state, setState] = useState<InputType>({ ...inputs });\n\n  // handles data change in dropdown\n  const handleChange = (\n    event: React.ChangeEvent<{\n      name?: string;\n      value: unknown;\n    }>,\n  ): void => {\n    const name = event.target.name as keyof typeof state;\n    setState({\n      ...state,\n      [name]: String(event.target.value),\n    });\n    setInputs({\n      ...inputs,\n      [name]: String(event.target.value),\n    });\n  };\n\n  return (\n    <div>\n      <FormControl required className={classes.formControl}>\n        <InputLabel htmlFor=\"date-native-required\">Date</InputLabel>\n        <Select\n          native\n          value={state.date}\n          onChange={handleChange}\n          name=\"date\"\n          inputProps={{\n            id: 'date-native-required',\n          }}\n        >\n          <option value={state.date}>{moment(state.date).format('LL')}</option>\n          <optgroup label=\"Available Dates\">\n            {getDates('2019-04-29', '2019-05-06').map((val) => (\n              <option value={val} key={val}>\n                {moment(val).format('LL')}\n              </option>\n            ))}\n          </optgroup>\n        </Select>\n        <FormHelperText>Required</FormHelperText>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default DateSelect;\n","/* eslint-disable camelcase */\nimport { Filters } from './selectHelpers';\n\n/**\n * Contains reading, id, and serial endpoints.\n */\nexport const endpoints = {\n  reading: '/api/reading',\n  id: '/api/id',\n  serial: '/api/serial',\n};\n\n// Change for build\nexport const baseURL = '';\n// export const baseURL = 'http://localhost:5000';\n\nexport interface devType {\n    Device_ID: string;\n}\n\nexport interface serialType {\n    Serial_Number: string;\n}\n\nexport interface dataType {\n  Serial_Number: string;\n  DateTime: Date;\n  Device_ID: string;\n  Wattage: number;\n}\n\nexport interface devIdReturn {\n    type: string;\n    results: devType[]\n}\n\nexport interface serialNumReturn {\n  type: string;\n  results: serialType[];\n}\n\nexport interface dataReturn {\n  type: string;\n  results: dataType[];\n}\n\nexport interface InputType {\n  date: string;\n  Device_ID: string;\n  Serial_Number: string;\n}\n\n/**\n * Gets url for different filter types.\n * @param type Filters\n * @returns a url string.\n */\nexport const getURL = (\n  type: Filters,\n): string => baseURL + (type === 'Device_ID' ? endpoints.id : endpoints.serial);\n\nexport interface DataPointReturn {\n  x: Date;\n  y: number;\n}\n\n/**\n * Returns only the DateTime and Wattage from readings\n * @param readings dataReturn\n * @returns all x and y dataPoints\n */\nexport const dataHandler = (readings: dataReturn): DataPointReturn[] => {\n  const res = readings.results.map(({ DateTime, Wattage }) => ({\n    x: DateTime,\n    y: Wattage,\n  }));\n  return res;\n};\n","import React, { useState, useEffect } from 'react';\nimport { dataReturn, devIdReturn, serialNumReturn } from './apiHelper';\n\ninterface ReturnType {\n    loading: boolean;\n    error: unknown | null;\n}\n\n/**\n * Grabs data from the API\n * @param url string API endpoint\n * @param setData React.Dispatch<\n    React.SetStateAction<dataReturn | devIdReturn | serialNumReturn | null>\n  >\n * @returns returns loading and error(if any)\n */\nconst useFetch = (\n  url: string,\n  setData: React.Dispatch<\n    React.SetStateAction<dataReturn | devIdReturn | serialNumReturn | null>\n  >,\n): ReturnType => {\n  const [error, setError] = useState<unknown | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await fetch(url);\n        const resJson = await res.json();\n        setData(resJson);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [url, setData]);\n  return { loading, error };\n};\nexport default useFetch;\n","import React, { useState } from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { Filters, useStyles } from '../../utils/selectHelpers';\nimport {\n  dataReturn, devIdReturn, serialNumReturn,\n  getURL, devType, serialType, InputType,\n} from '../../utils/apiHelper';\nimport useFetch from '../../utils/useFetch.hook';\n\ninterface Props {\n  type: Filters;\n  inputs: InputType;\n  setInputs: React.Dispatch<React.SetStateAction<InputType>>;\n}\n\ninterface SelectDetails {\n  label: string;\n  value: string;\n  title: string;\n}\n\n/**\n * Creates filter drop down components\n * @param type Filters\n * @param inputs InputType\n * @param setInputs  React.Dispatch<React.SetStateAction<InputType>>\n * @returns React component\n */\nconst FilterSelect: React.FC<Props> = ({ type, inputs, setInputs }) => {\n  const classes = useStyles();\n  const [state, setState] = useState<SelectDetails>({\n    label: type === 'Device_ID' ? 'ID' : 'SN',\n    value: '',\n    title: type === 'Device_ID' ? 'Device ID' : 'Serial Number',\n  });\n  const [\n    list,\n    setList,\n  ] = useState<dataReturn | devIdReturn | serialNumReturn | null>(null);\n\n  // Load list of filters\n  const { loading, error } = useFetch(getURL(type), setList);\n\n  // handles dropdown value change\n  const handleChange = (\n    event: React.ChangeEvent<{\n      name?: string;\n      value: unknown;\n    }>,\n  ): void => {\n    const name = event.target.name as keyof typeof state;\n\n    setState({\n      ...state,\n      [name]: String(event.target.value),\n      value: String(event.target.value),\n    });\n    setInputs({\n      ...inputs,\n      [name]: String(event.target.value),\n    });\n  };\n\n  return (\n    <div>\n      <FormControl className={classes.formControl}>\n        <InputLabel htmlFor={`${type}-native-required`}>\n          {state.label}\n        </InputLabel>\n        <Select\n          native\n          value={state.value}\n          onChange={handleChange}\n          name={type}\n          inputProps={{\n            id: `${type}-native-required`,\n          }}\n        >\n          <option value=\"Any\">Any</option>\n          <optgroup label={`${state.title}s`}>\n            {!loading && list && !error\n              ? list?.results.map((val) => {\n                const value: string = type === 'Device_ID'\n                  ? (val as devType).Device_ID\n                  : (val as serialType).Serial_Number;\n                return (\n                  <option value={value} key={value}>\n                    {value}\n                  </option>\n                );\n              })\n              : null}\n          </optgroup>\n        </Select>\n        <FormHelperText>{type}</FormHelperText>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default FilterSelect;\n","import React, { useState } from 'react';\nimport { Button } from '@material-ui/core';\nimport DateSelect from './DateSelect';\nimport FilterSelects from './FilterSelect';\nimport { InputType } from '../../utils/apiHelper';\n\ninterface Props {\n  data: InputType;\n  setData: React.Dispatch<React.SetStateAction<InputType>>;\n}\n\n/**\n * Container for dropdown filters\n * @param data InputType\n * @param setData React.Dispatch<React.SetStateAction<InputType>>\n * @returns React component\n */\nconst FilterContainer: React.FC<Props> = ({ data, setData }) => {\n  const [inputs, setInputs] = useState<InputType>({ ...data });\n\n  // changes data when show results button is clicked\n  const handleClick = (e: React.MouseEvent<HTMLElement>): void => {\n    e.preventDefault();\n    setData({ ...inputs });\n  };\n\n  return (\n    <div className=\"filtercontainer\">\n      <div className=\"filterselects\">\n        <div className=\"filterinner\">\n          <DateSelect inputs={inputs} setInputs={setInputs} />\n        </div>\n        <div className=\"filterinner\">\n          <FilterSelects\n            type=\"Serial_Number\"\n            inputs={inputs}\n            setInputs={setInputs}\n          />\n          <FilterSelects\n            type=\"Device_ID\"\n            inputs={inputs}\n            setInputs={setInputs}\n          />\n        </div>\n      </div>\n      <Button variant=\"contained\" color=\"primary\" onClick={handleClick}>\n        Show Results\n      </Button>\n    </div>\n  );\n};\n\nexport default FilterContainer;\n","import React, { ReactElement } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { ChartOptions, ChartData } from 'chart.js';\nimport moment from 'moment';\nimport { DataPointReturn } from '../../utils/apiHelper';\n\ninterface Props {\n    dataPoints: DataPointReturn[]\n}\n\n/**\n * Creates line graph using dataPoints\n * @param dataPoints DataPointReturn[]\n * @returns Returns graph component\n */\nconst ResultGraphs: React.FC<Props> = ({ dataPoints }): ReactElement => {\n  const x: string[] = [];\n  const y: number[] = [];\n\n  // get time and wattage from dataPoints\n  dataPoints.forEach((val) => {\n    const values = Object.values(val);\n    x.push(moment(values[0]).add(6, 'hours').format('LT'));\n    y.push(values[1]);\n  });\n  console.log(dataPoints);\n\n  const data: ChartData = {\n    labels: x,\n    datasets: [\n      {\n        label: 'Wattage',\n        data: y,\n        fill: false,\n        backgroundColor: '#17173A',\n        borderColor: '#17173A',\n        pointBackgroundColor: '#17173A',\n      },\n    ],\n  };\n\n  const options: ChartOptions = {\n    responsive: true,\n    scales: {\n      y: {\n        ticks: {\n          display: true,\n        },\n        beginAtZero: true,\n        title: {\n          text: 'Watts',\n          display: true,\n        },\n      },\n      x: {\n        ticks: {\n          display: true,\n        },\n        title: {\n          text: 'Time',\n          display: true,\n        },\n      },\n    },\n    maintainAspectRatio: false,\n    elements: {\n      point: {\n        radius: 1,\n      },\n    },\n  };\n\n  return <Line type=\"line\" data={data} options={options} />;\n};\n\nexport default ResultGraphs;\n","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  root: {\n    display: 'flex',\n    '& > * + *': {\n      marginLeft: theme.spacing(2),\n    },\n  },\n}));\n\nconst Spinner = (): React.ReactElement => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <CircularProgress />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport ResultGraph from './ResultGraph';\nimport {\n  InputType, dataReturn, baseURL, endpoints,\n  devIdReturn, serialNumReturn, dataHandler, DataPointReturn,\n} from '../../utils/apiHelper';\nimport useFetch from '../../utils/useFetch.hook';\nimport Spinner from '../hoc/Spinner';\n\ninterface Props {\n    data: InputType;\n}\n\n/**\n * Container for line graph\n * @param data InputType\n * @returns React component\n */\nconst GraphContainer: React.FC<Props> = ({ data }) => {\n  const [\n    readings,\n    setReadings,\n  ] = useState<dataReturn | devIdReturn | serialNumReturn | null>(null);\n\n  const [loading, setLoading] = useState(true);\n  const [dataPoints, setDataPoints] = useState<DataPointReturn[]>([]);\n\n  useEffect(() => {\n    setLoading(true);\n  }, [data]);\n\n  useEffect(() => {\n    if (readings && loading) {\n      // set loading to false to remove loading animation\n      setLoading(false);\n      setDataPoints(dataHandler((readings as dataReturn)));\n    }\n  }, [readings]);\n\n  let endpoint = `${baseURL + endpoints.reading}?day=${data.date}`;\n  if (data.Serial_Number !== 'Any') endpoint += `&sn=${data.Serial_Number}`;\n  if (data.Device_ID !== 'Any') endpoint += `&id=${data.Device_ID}`;\n\n  const { error } = useFetch(endpoint, setReadings);\n  return (\n    <div>\n      <h3 className=\"centerhead\">\n        {'Electrical Consumption on '}\n        {`${moment(data.date).format('LL')}`}\n        <br />\n        <em>\n          {data.Serial_Number !== 'Any'\n            ? `Serial Number: ${data.Serial_Number}`\n            : 'Serial Number: Any'}\n          <br />\n          {data.Device_ID !== 'Any'\n            ? `Device ID: ${data.Device_ID}`\n            : 'Device ID: Any'}\n          <br />\n        </em>\n      </h3>\n      <div className=\"graphcontainer\">\n        {!loading && !error ? (\n          <ResultGraph dataPoints={dataPoints} />\n        ) : (\n          <Spinner />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default GraphContainer;\n","import React, { useState } from 'react';\nimport './Home.css';\nimport FilterContainer from '../components/filter/FilterContainer';\nimport GraphContainer from '../components/graph/GraphContainer';\nimport { InputType } from '../utils/apiHelper';\n\n/**\n * Container for all components on Home page\n * @returns Home Page component\n */\nconst Home: React.FC = () => {\n  const [data, setData] = useState<InputType>({\n    date: '2019-04-29',\n    Device_ID: 'Any',\n    Serial_Number: 'Any',\n  });\n\n  return (\n    <div className=\"appcontainer\">\n      <h1 className=\"centerhead\">Smart Homes Data Visualization</h1>\n      <h4 className=\"centerhead\">Filter</h4>\n      <FilterContainer data={data} setData={setData} />\n      <GraphContainer data={data} />\n    </div>\n  );\n};\nexport default Home;\n","import React from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home';\n\nconst App: React.FC = (): React.ReactElement => (\n  <Switch>\n    <Route exact path=\"/\" component={Home} />\n  </Switch>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './normalize.css';\n// import './webflow.css';\nimport './index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}